#include<iostream>

#include<vector>

#include<string.h>

#define ERR_MSG cout<<"INVALID "

#define K_RULES {{0,1},{1,0},{1,1},{-1,0},{0,-1},{-1,-1},{-1,1},{1,-1}};

#define N_RULES {{1,2},{2,1},{-1,-2},{-2,-1},{-1,2},{-2,1},{1,-2},{2,-1}};

bool CHK_BOUND(int x,int y)
{
    return (x>=0&&y>=0&&x<8&&y<8);
}

struct piece
{
    char COLOR;
    //'B' for Black 'W' for White//
    char PIECE;
    /* NAME OF THE PIECE K for king Q for Queen B for Bishop
    N for Knight R for Rook P for Pawn */
    int RULES[8][2];
    //DEFINING THE RULES??//

    piece()
    {
        //PIECE COLOR
        std::cout<<"Enter Piece color 'B' for Black 'W' for White \n";
        std::cin>>COLOR;

        //PIECE TYPE
        std::cout<<"Enter the Piece K for king Q for Queen B for Bishop N for Knight R for Rook P for Pawn \n";
        std::cin>>PIECE;

        //DEFINE RULES OR SQUARES IT CAN ENTER(RELATIVE)
    if(PIECE=='K')
        {
          int rules[][2]=K_RULES;

            for(int i=0;i<8;i++)
            {
                
                for(int j=0;j<2;j++)
                    
                {
                    
                  RULES[i][j]=rules[i][j];
                  //std::cout<<RULES[i][j];
                }
                
            }
            
          }
    else if(PIECE=='N')
    {
          int rules[][2]=N_RULES;

          for(int i=0;i<8;i++)
          {
              for(int j=0;j<2;j++)
                
              {
                  
                  RULES[i][j]=rules[i][j];
              
              }
              
          }


    }

    void display()
    {
        std::cout<<"COLOR: "<< COLOR <<"\n PIECE:"<< PIECE<<"\n";
        //row:"<< pos[0]<<"\n col:"<<pos[1];
    }

};
class chessboard
{

  int C_BRD[8][8];

  piece P[2];

  public:

  chessboard()
  {
//Create Chessboard //
    for(int i=0;i<8;i++)
    {

      for(int j=0;j<8;j++)
       {
         C_BRD[i][j]=99;
       }

    }

//PUT PIECES//
C_BRD[4][4]=P[0].PIECE;

C_BRD[5][5]=P[1].PIECE;

}
void display()
{
    for(int i=0;i<8;i++)
    {
       for(int j=0;j<8;j++)
       {

        std::cout<<C_BRD[i][j]<<"  ";

       }

       std::cout<<"\n\n";
    }

    std::cout<<"\n\n";
}

void legal_moves()
{
for(int PIECE_IN=0;PIECE_IN<2;PIECE_IN++)
{
    for(int ROW_IN=0;ROW_IN<8;ROW_IN++)
    {
        int flag=0;

        for(int COL_IN=0;COL_IN<8;COL_IN++)
        {
           if(C_BRD[ROW_IN][COL_IN]==P[PIECE_IN].PIECE)
           {
               for(int R=0;R<8;R++)
               {
                    if(CHK_NO_BARRIER(ROW_IN+P[PIECE_IN].RULES[R][0],COL_IN+P[PIECE_IN].RULES[R][1]))
                    {
                          C_BRD[ROW_IN+P[PIECE_IN].RULES[R][0]][COL_IN+P[PIECE_IN].RULES[R][1]]=P[PIECE_IN].PIECE;
                   //std::cout<<i+P.RULES[R][0]<<j+P.RULES[R][1];
                    }
               }

               C_BRD[ROW_IN][COL_IN]=99;

               flag=1;

               break;
           }
        }
        if(flag)
           break;
    }
}

}

   bool CHK_NO_BARRIER(int row,int col)

   {
       return (C_BRD[row][col]==99)&&(row>=0&&col>=0&&row<8&&col<8);
   }

};

int main()
{
    chessboard C;

    C.display();

    C.legal_moves();

    C.display();

    return 0;
}



